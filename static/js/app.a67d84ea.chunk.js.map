{"version":3,"sources":["App.js"],"names":["App","useState","inputText","setInputText","description","key","completed","tasks","setTasks","addTask","useCallback","keys","map","task","parseInt","console","log","maxKey","Math","max","newTask","toString","inputQuestion","setInputQuestion","questions","setQuestions","addQuestion","question","newQuestion","style","styles","container","innerContainer","title","value","onChangeText","height","paddingBottom","onPress","data","keyExtractor","item","renderItem","curQuestion","find","t","checked","textStyle","textDecorationLine","textDecorationStyle","undefined","curTask","StyleSheet","create","input","flex","flexDirection","lineHeight","marginBottom","fontSize","alignSelf","padding","maxWidth","backgroundColor","alignItems","justifyContent"],"mappings":"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","file":"static/js/app.a67d84ea.chunk.js","sourcesContent":["//For Portfolio 2, I've decided to go for Option 1.1\r\n//The goal of this option was to create additional or redesign current components\r\n//For this particular lab, I've decided to add another \"Question Quiz\" to add to the TODO app done in Lab 7\r\n//In which the primary goal of the \"Question Checkbox\" is moreso if to add questions \r\n//(it could about any subject or used in different ways) and then crossed off once a question is answered. \r\n\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { useCallback, useState } from 'react';\r\nimport { FlatList, StyleSheet, Text, View} from 'react-native';\r\nimport { Button, CheckBox, Input} from 'react-native-elements';\r\n\r\nexport default function App() {\r\n  let[inputText, setInputText] = useState(\"\")\r\n  let[tasks, setTasks] = useState([\r\n    {description: \"Task 1\", key: \"1\", completed: true},\r\n    {description: \"Task 2\", key: \"2\", completed: false},\r\n    {description: \"Task 3\", key: \"3\", completed: false},\r\n  ])\r\n  let addTask = useCallback(() => {\r\n    let keys = tasks.map(task => parseInt(task.key))\r\n    console.log(keys)\r\n    let maxKey = Math.max(...keys) + 1\r\n    let newTask = {description:inputText, completed: false, key: maxKey.toString()}\r\n    console.log(newTask)\r\n    setTasks([...tasks, newTask])\r\n    setInputText(\"\")\r\n  }, [inputText])\r\n  \r\n  let[inputQuestion, setInputQuestion] = useState(\"\")\r\n  let[questions, setQuestions] = useState([\r\n    {description: \"Question 1\", key: \"1\", completed: true},\r\n    {description: \"Question 2\", key: \"2\", completed: false},\r\n    {description: \"Question 3\", key: \"3\", completed: false},\r\n  ])\r\n  let addQuestion = useCallback(() => {\r\n    let keys = questions.map(question => parseInt(question.key))\r\n    console.log(keys)\r\n    let maxKey = Math.max(...keys) + 1\r\n    let newQuestion = {description:inputQuestion, completed: false, key: maxKey.toString()}\r\n    console.log(newQuestion)\r\n    setQuestions([...questions, newQuestion])\r\n    setInputQuestion(\"\")\r\n  }, [inputQuestion])\r\nreturn (\r\n  <View style = {styles.container}>\r\n  <View style = {styles.innerContainer}>\r\n  <Text style = {styles.title}>Question App</Text>\r\n  <Input value = {inputQuestion} onChangeText={setInputQuestion} style = {{height:30, paddingBottom: 10}}></Input>\r\n  <Button title= \"Add Question\" onPress={addQuestion}></Button>\r\n  <FlatList data={questions} keyExtractor = {(item) => item.key} renderItem={({item: question}) =>\r\n  <CheckBox onPress={() =>{\r\n    let curQuestion = questions.find(t => t.key == question.key)\r\n    curQuestion.completed = !curQuestion.completed\r\n    setQuestions([...questions])\r\n  }} title = {question.description} \r\n  checked={question.completed}\r\n  textStyle={question.completed ? {\r\n    textDecorationLine: 'line-through', \r\n    textDecorationStyle: 'solid'\r\n  }: undefined}\r\n  ></CheckBox>\r\n}/>\r\n  <Text style = {styles.title}>TODO App</Text>\r\n  <Input value = {inputText} onChangeText={setInputText} style = {{height:30, paddingBottom: 10}}></Input>\r\n  <Button title= \"Add\" onPress={addTask}></Button>\r\n  <FlatList data={tasks} keyExtractor = {(item) => item.key} renderItem={({item: task}) =>\r\n  <CheckBox onPress={() =>{\r\n    let curTask = tasks.find(t => t.key == task.key)\r\n    curTask.completed = !curTask.completed\r\n    setTasks([...tasks])\r\n  }} title = {task.description} \r\n  checked={task.completed}\r\n  textStyle={task.completed ? {\r\n    textDecorationLine: 'line-through', \r\n    textDecorationStyle: 'solid'\r\n  }: undefined}\r\n  ></CheckBox>\r\n  }/>\r\n    </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  input:{\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    lineHeight: 40,\r\n    paddingBottom: 50,\r\n    marginBottom: 50\r\n  },\r\n  title:{\r\n    fontSize: 25,\r\n    alignSelf: \"center\",\r\n    padding: 15\r\n  },\r\n  innerContainer: {\r\n    maxWidth: 300,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n\r\n\r\n"],"sourceRoot":""}